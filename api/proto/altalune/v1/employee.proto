syntax = "proto3";

package altalune.v1;

option go_package = "github.com/hrz8/altalune/gen/altalune/v1;altalunev1";

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";
import "altalune/v1/common.proto";

enum EmployeeStatus {
  EMPLOYEE_STATUS_UNSPECIFIED = 0;
  EMPLOYEE_STATUS_ACTIVE = 1;
  EMPLOYEE_STATUS_INACTIVE = 2;
}

message Employee {
  string id = 1;
  string name = 2;
  string email = 3;
  string role = 4;
  string department = 5;
  EmployeeStatus status = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message CreateEmployeeRequest {
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      len: 14,
    }
  ];
  string name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 50,
      pattern: "^[a-zA-Z\\s]+$"
    }
  ];
  string email = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      email: true,
      max_len: 100
    }
  ];
  string role = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    }
  ];
  string department = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    }
  ];
  EmployeeStatus status = 6 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]
    }
  ];
}

message CreateEmployeeResponse {
  Employee employee = 1;
  string message = 2;
}

message QueryEmployeesRequest {
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      len: 14,
    }
  ];
  QueryRequest query = 2;
}

message QueryEmployeesResponse {
  repeated Employee data = 1;
  QueryMetaResponse meta = 2;
}

message GetEmployeeRequest {
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      len: 14,
    }
  ];
  string employee_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 14,
      max_len: 14
    }
  ];
}

message GetEmployeeResponse {
  Employee employee = 1;
}

message UpdateEmployeeRequest {
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      len: 14,
    }
  ];
  string employee_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 14,
      max_len: 14
    }
  ];
  string name = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 50,
      pattern: "^[a-zA-Z\\s]+$"
    }
  ];
  string email = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      email: true,
      max_len: 100
    }
  ];
  string role = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    }
  ];
  string department = 6 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    }
  ];
  EmployeeStatus status = 7 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]
    }
  ];
}

message UpdateEmployeeResponse {
  Employee employee = 1;
  string message = 2;
}

message DeleteEmployeeRequest {
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      len: 14,
    }
  ];
  string employee_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      min_len: 14,
      max_len: 14
    }
  ];
}

message DeleteEmployeeResponse {
  string message = 1;
}

service EmployeeService {
  rpc QueryEmployees(QueryEmployeesRequest) returns (QueryEmployeesResponse) {}
  rpc CreateEmployee(CreateEmployeeRequest) returns (CreateEmployeeResponse) {}
  rpc GetEmployee(GetEmployeeRequest) returns (GetEmployeeResponse) {}
  rpc UpdateEmployee(UpdateEmployeeRequest) returns (UpdateEmployeeResponse) {}
  rpc DeleteEmployee(DeleteEmployeeRequest) returns (DeleteEmployeeResponse) {}
}
