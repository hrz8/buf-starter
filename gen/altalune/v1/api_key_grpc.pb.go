// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: altalune/v1/api_key.proto

package altalunev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiKeyService_QueryApiKeys_FullMethodName     = "/altalune.v1.ApiKeyService/QueryApiKeys"
	ApiKeyService_CreateApiKey_FullMethodName     = "/altalune.v1.ApiKeyService/CreateApiKey"
	ApiKeyService_GetApiKey_FullMethodName        = "/altalune.v1.ApiKeyService/GetApiKey"
	ApiKeyService_UpdateApiKey_FullMethodName     = "/altalune.v1.ApiKeyService/UpdateApiKey"
	ApiKeyService_DeleteApiKey_FullMethodName     = "/altalune.v1.ApiKeyService/DeleteApiKey"
	ApiKeyService_ActivateApiKey_FullMethodName   = "/altalune.v1.ApiKeyService/ActivateApiKey"
	ApiKeyService_DeactivateApiKey_FullMethodName = "/altalune.v1.ApiKeyService/DeactivateApiKey"
)

// ApiKeyServiceClient is the client API for ApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeyServiceClient interface {
	QueryApiKeys(ctx context.Context, in *QueryApiKeysRequest, opts ...grpc.CallOption) (*QueryApiKeysResponse, error)
	CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error)
	GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error)
	UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error)
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
	ActivateApiKey(ctx context.Context, in *ActivateApiKeyRequest, opts ...grpc.CallOption) (*ActivateApiKeyResponse, error)
	DeactivateApiKey(ctx context.Context, in *DeactivateApiKeyRequest, opts ...grpc.CallOption) (*DeactivateApiKeyResponse, error)
}

type apiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServiceClient(cc grpc.ClientConnInterface) ApiKeyServiceClient {
	return &apiKeyServiceClient{cc}
}

func (c *apiKeyServiceClient) QueryApiKeys(ctx context.Context, in *QueryApiKeysRequest, opts ...grpc.CallOption) (*QueryApiKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryApiKeysResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_QueryApiKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_CreateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_GetApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_UpdateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_DeleteApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) ActivateApiKey(ctx context.Context, in *ActivateApiKeyRequest, opts ...grpc.CallOption) (*ActivateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_ActivateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) DeactivateApiKey(ctx context.Context, in *DeactivateApiKeyRequest, opts ...grpc.CallOption) (*DeactivateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKeyService_DeactivateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServiceServer is the server API for ApiKeyService service.
// All implementations must embed UnimplementedApiKeyServiceServer
// for forward compatibility.
type ApiKeyServiceServer interface {
	QueryApiKeys(context.Context, *QueryApiKeysRequest) (*QueryApiKeysResponse, error)
	CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error)
	GetApiKey(context.Context, *GetApiKeyRequest) (*GetApiKeyResponse, error)
	UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error)
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
	ActivateApiKey(context.Context, *ActivateApiKeyRequest) (*ActivateApiKeyResponse, error)
	DeactivateApiKey(context.Context, *DeactivateApiKeyRequest) (*DeactivateApiKeyResponse, error)
	mustEmbedUnimplementedApiKeyServiceServer()
}

// UnimplementedApiKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiKeyServiceServer struct{}

func (UnimplementedApiKeyServiceServer) QueryApiKeys(context.Context, *QueryApiKeysRequest) (*QueryApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApiKeys not implemented")
}
func (UnimplementedApiKeyServiceServer) CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) GetApiKey(context.Context, *GetApiKeyRequest) (*GetApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) ActivateApiKey(context.Context, *ActivateApiKeyRequest) (*ActivateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) DeactivateApiKey(context.Context, *DeactivateApiKeyRequest) (*DeactivateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateApiKey not implemented")
}
func (UnimplementedApiKeyServiceServer) mustEmbedUnimplementedApiKeyServiceServer() {}
func (UnimplementedApiKeyServiceServer) testEmbeddedByValue()                       {}

// UnsafeApiKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeyServiceServer will
// result in compilation errors.
type UnsafeApiKeyServiceServer interface {
	mustEmbedUnimplementedApiKeyServiceServer()
}

func RegisterApiKeyServiceServer(s grpc.ServiceRegistrar, srv ApiKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiKeyService_ServiceDesc, srv)
}

func _ApiKeyService_QueryApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).QueryApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_QueryApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).QueryApiKeys(ctx, req.(*QueryApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_CreateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).CreateApiKey(ctx, req.(*CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_GetApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).GetApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_GetApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).GetApiKey(ctx, req.(*GetApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_UpdateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).UpdateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_UpdateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).UpdateApiKey(ctx, req.(*UpdateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_DeleteApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_ActivateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).ActivateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_ActivateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).ActivateApiKey(ctx, req.(*ActivateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_DeactivateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).DeactivateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKeyService_DeactivateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).DeactivateApiKey(ctx, req.(*DeactivateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiKeyService_ServiceDesc is the grpc.ServiceDesc for ApiKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "altalune.v1.ApiKeyService",
	HandlerType: (*ApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryApiKeys",
			Handler:    _ApiKeyService_QueryApiKeys_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _ApiKeyService_CreateApiKey_Handler,
		},
		{
			MethodName: "GetApiKey",
			Handler:    _ApiKeyService_GetApiKey_Handler,
		},
		{
			MethodName: "UpdateApiKey",
			Handler:    _ApiKeyService_UpdateApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _ApiKeyService_DeleteApiKey_Handler,
		},
		{
			MethodName: "ActivateApiKey",
			Handler:    _ApiKeyService_ActivateApiKey_Handler,
		},
		{
			MethodName: "DeactivateApiKey",
			Handler:    _ApiKeyService_DeactivateApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "altalune/v1/api_key.proto",
}
