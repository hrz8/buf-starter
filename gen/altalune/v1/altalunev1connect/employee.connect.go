// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: altalune/v1/employee.proto

package altalunev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hrz8/altalune/gen/altalune/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmployeeServiceName is the fully-qualified name of the EmployeeService service.
	EmployeeServiceName = "altalune.v1.EmployeeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmployeeServiceQueryEmployeesProcedure is the fully-qualified name of the EmployeeService's
	// QueryEmployees RPC.
	EmployeeServiceQueryEmployeesProcedure = "/altalune.v1.EmployeeService/QueryEmployees"
	// EmployeeServiceCreateEmployeeProcedure is the fully-qualified name of the EmployeeService's
	// CreateEmployee RPC.
	EmployeeServiceCreateEmployeeProcedure = "/altalune.v1.EmployeeService/CreateEmployee"
	// EmployeeServiceGetEmployeeProcedure is the fully-qualified name of the EmployeeService's
	// GetEmployee RPC.
	EmployeeServiceGetEmployeeProcedure = "/altalune.v1.EmployeeService/GetEmployee"
	// EmployeeServiceUpdateEmployeeProcedure is the fully-qualified name of the EmployeeService's
	// UpdateEmployee RPC.
	EmployeeServiceUpdateEmployeeProcedure = "/altalune.v1.EmployeeService/UpdateEmployee"
	// EmployeeServiceDeleteEmployeeProcedure is the fully-qualified name of the EmployeeService's
	// DeleteEmployee RPC.
	EmployeeServiceDeleteEmployeeProcedure = "/altalune.v1.EmployeeService/DeleteEmployee"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	employeeServiceServiceDescriptor              = v1.File_altalune_v1_employee_proto.Services().ByName("EmployeeService")
	employeeServiceQueryEmployeesMethodDescriptor = employeeServiceServiceDescriptor.Methods().ByName("QueryEmployees")
	employeeServiceCreateEmployeeMethodDescriptor = employeeServiceServiceDescriptor.Methods().ByName("CreateEmployee")
	employeeServiceGetEmployeeMethodDescriptor    = employeeServiceServiceDescriptor.Methods().ByName("GetEmployee")
	employeeServiceUpdateEmployeeMethodDescriptor = employeeServiceServiceDescriptor.Methods().ByName("UpdateEmployee")
	employeeServiceDeleteEmployeeMethodDescriptor = employeeServiceServiceDescriptor.Methods().ByName("DeleteEmployee")
)

// EmployeeServiceClient is a client for the altalune.v1.EmployeeService service.
type EmployeeServiceClient interface {
	QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error)
	CreateEmployee(context.Context, *connect.Request[v1.CreateEmployeeRequest]) (*connect.Response[v1.CreateEmployeeResponse], error)
	GetEmployee(context.Context, *connect.Request[v1.GetEmployeeRequest]) (*connect.Response[v1.GetEmployeeResponse], error)
	UpdateEmployee(context.Context, *connect.Request[v1.UpdateEmployeeRequest]) (*connect.Response[v1.UpdateEmployeeResponse], error)
	DeleteEmployee(context.Context, *connect.Request[v1.DeleteEmployeeRequest]) (*connect.Response[v1.DeleteEmployeeResponse], error)
}

// NewEmployeeServiceClient constructs a client for the altalune.v1.EmployeeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmployeeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmployeeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &employeeServiceClient{
		queryEmployees: connect.NewClient[v1.QueryEmployeesRequest, v1.QueryEmployeesResponse](
			httpClient,
			baseURL+EmployeeServiceQueryEmployeesProcedure,
			connect.WithSchema(employeeServiceQueryEmployeesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEmployee: connect.NewClient[v1.CreateEmployeeRequest, v1.CreateEmployeeResponse](
			httpClient,
			baseURL+EmployeeServiceCreateEmployeeProcedure,
			connect.WithSchema(employeeServiceCreateEmployeeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEmployee: connect.NewClient[v1.GetEmployeeRequest, v1.GetEmployeeResponse](
			httpClient,
			baseURL+EmployeeServiceGetEmployeeProcedure,
			connect.WithSchema(employeeServiceGetEmployeeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEmployee: connect.NewClient[v1.UpdateEmployeeRequest, v1.UpdateEmployeeResponse](
			httpClient,
			baseURL+EmployeeServiceUpdateEmployeeProcedure,
			connect.WithSchema(employeeServiceUpdateEmployeeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEmployee: connect.NewClient[v1.DeleteEmployeeRequest, v1.DeleteEmployeeResponse](
			httpClient,
			baseURL+EmployeeServiceDeleteEmployeeProcedure,
			connect.WithSchema(employeeServiceDeleteEmployeeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// employeeServiceClient implements EmployeeServiceClient.
type employeeServiceClient struct {
	queryEmployees *connect.Client[v1.QueryEmployeesRequest, v1.QueryEmployeesResponse]
	createEmployee *connect.Client[v1.CreateEmployeeRequest, v1.CreateEmployeeResponse]
	getEmployee    *connect.Client[v1.GetEmployeeRequest, v1.GetEmployeeResponse]
	updateEmployee *connect.Client[v1.UpdateEmployeeRequest, v1.UpdateEmployeeResponse]
	deleteEmployee *connect.Client[v1.DeleteEmployeeRequest, v1.DeleteEmployeeResponse]
}

// QueryEmployees calls altalune.v1.EmployeeService.QueryEmployees.
func (c *employeeServiceClient) QueryEmployees(ctx context.Context, req *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error) {
	return c.queryEmployees.CallUnary(ctx, req)
}

// CreateEmployee calls altalune.v1.EmployeeService.CreateEmployee.
func (c *employeeServiceClient) CreateEmployee(ctx context.Context, req *connect.Request[v1.CreateEmployeeRequest]) (*connect.Response[v1.CreateEmployeeResponse], error) {
	return c.createEmployee.CallUnary(ctx, req)
}

// GetEmployee calls altalune.v1.EmployeeService.GetEmployee.
func (c *employeeServiceClient) GetEmployee(ctx context.Context, req *connect.Request[v1.GetEmployeeRequest]) (*connect.Response[v1.GetEmployeeResponse], error) {
	return c.getEmployee.CallUnary(ctx, req)
}

// UpdateEmployee calls altalune.v1.EmployeeService.UpdateEmployee.
func (c *employeeServiceClient) UpdateEmployee(ctx context.Context, req *connect.Request[v1.UpdateEmployeeRequest]) (*connect.Response[v1.UpdateEmployeeResponse], error) {
	return c.updateEmployee.CallUnary(ctx, req)
}

// DeleteEmployee calls altalune.v1.EmployeeService.DeleteEmployee.
func (c *employeeServiceClient) DeleteEmployee(ctx context.Context, req *connect.Request[v1.DeleteEmployeeRequest]) (*connect.Response[v1.DeleteEmployeeResponse], error) {
	return c.deleteEmployee.CallUnary(ctx, req)
}

// EmployeeServiceHandler is an implementation of the altalune.v1.EmployeeService service.
type EmployeeServiceHandler interface {
	QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error)
	CreateEmployee(context.Context, *connect.Request[v1.CreateEmployeeRequest]) (*connect.Response[v1.CreateEmployeeResponse], error)
	GetEmployee(context.Context, *connect.Request[v1.GetEmployeeRequest]) (*connect.Response[v1.GetEmployeeResponse], error)
	UpdateEmployee(context.Context, *connect.Request[v1.UpdateEmployeeRequest]) (*connect.Response[v1.UpdateEmployeeResponse], error)
	DeleteEmployee(context.Context, *connect.Request[v1.DeleteEmployeeRequest]) (*connect.Response[v1.DeleteEmployeeResponse], error)
}

// NewEmployeeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmployeeServiceHandler(svc EmployeeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	employeeServiceQueryEmployeesHandler := connect.NewUnaryHandler(
		EmployeeServiceQueryEmployeesProcedure,
		svc.QueryEmployees,
		connect.WithSchema(employeeServiceQueryEmployeesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	employeeServiceCreateEmployeeHandler := connect.NewUnaryHandler(
		EmployeeServiceCreateEmployeeProcedure,
		svc.CreateEmployee,
		connect.WithSchema(employeeServiceCreateEmployeeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	employeeServiceGetEmployeeHandler := connect.NewUnaryHandler(
		EmployeeServiceGetEmployeeProcedure,
		svc.GetEmployee,
		connect.WithSchema(employeeServiceGetEmployeeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	employeeServiceUpdateEmployeeHandler := connect.NewUnaryHandler(
		EmployeeServiceUpdateEmployeeProcedure,
		svc.UpdateEmployee,
		connect.WithSchema(employeeServiceUpdateEmployeeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	employeeServiceDeleteEmployeeHandler := connect.NewUnaryHandler(
		EmployeeServiceDeleteEmployeeProcedure,
		svc.DeleteEmployee,
		connect.WithSchema(employeeServiceDeleteEmployeeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/altalune.v1.EmployeeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmployeeServiceQueryEmployeesProcedure:
			employeeServiceQueryEmployeesHandler.ServeHTTP(w, r)
		case EmployeeServiceCreateEmployeeProcedure:
			employeeServiceCreateEmployeeHandler.ServeHTTP(w, r)
		case EmployeeServiceGetEmployeeProcedure:
			employeeServiceGetEmployeeHandler.ServeHTTP(w, r)
		case EmployeeServiceUpdateEmployeeProcedure:
			employeeServiceUpdateEmployeeHandler.ServeHTTP(w, r)
		case EmployeeServiceDeleteEmployeeProcedure:
			employeeServiceDeleteEmployeeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmployeeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmployeeServiceHandler struct{}

func (UnimplementedEmployeeServiceHandler) QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.QueryEmployees is not implemented"))
}

func (UnimplementedEmployeeServiceHandler) CreateEmployee(context.Context, *connect.Request[v1.CreateEmployeeRequest]) (*connect.Response[v1.CreateEmployeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.CreateEmployee is not implemented"))
}

func (UnimplementedEmployeeServiceHandler) GetEmployee(context.Context, *connect.Request[v1.GetEmployeeRequest]) (*connect.Response[v1.GetEmployeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.GetEmployee is not implemented"))
}

func (UnimplementedEmployeeServiceHandler) UpdateEmployee(context.Context, *connect.Request[v1.UpdateEmployeeRequest]) (*connect.Response[v1.UpdateEmployeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.UpdateEmployee is not implemented"))
}

func (UnimplementedEmployeeServiceHandler) DeleteEmployee(context.Context, *connect.Request[v1.DeleteEmployeeRequest]) (*connect.Response[v1.DeleteEmployeeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.DeleteEmployee is not implemented"))
}
