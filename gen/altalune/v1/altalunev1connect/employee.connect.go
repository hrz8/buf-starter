// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: altalune/v1/employee.proto

package altalunev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hrz8/altalune/gen/altalune/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmployeeServiceName is the fully-qualified name of the EmployeeService service.
	EmployeeServiceName = "altalune.v1.EmployeeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmployeeServiceQueryEmployeesProcedure is the fully-qualified name of the EmployeeService's
	// QueryEmployees RPC.
	EmployeeServiceQueryEmployeesProcedure = "/altalune.v1.EmployeeService/QueryEmployees"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	employeeServiceServiceDescriptor              = v1.File_altalune_v1_employee_proto.Services().ByName("EmployeeService")
	employeeServiceQueryEmployeesMethodDescriptor = employeeServiceServiceDescriptor.Methods().ByName("QueryEmployees")
)

// EmployeeServiceClient is a client for the altalune.v1.EmployeeService service.
type EmployeeServiceClient interface {
	QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error)
}

// NewEmployeeServiceClient constructs a client for the altalune.v1.EmployeeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmployeeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmployeeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &employeeServiceClient{
		queryEmployees: connect.NewClient[v1.QueryEmployeesRequest, v1.QueryEmployeesResponse](
			httpClient,
			baseURL+EmployeeServiceQueryEmployeesProcedure,
			connect.WithSchema(employeeServiceQueryEmployeesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// employeeServiceClient implements EmployeeServiceClient.
type employeeServiceClient struct {
	queryEmployees *connect.Client[v1.QueryEmployeesRequest, v1.QueryEmployeesResponse]
}

// QueryEmployees calls altalune.v1.EmployeeService.QueryEmployees.
func (c *employeeServiceClient) QueryEmployees(ctx context.Context, req *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error) {
	return c.queryEmployees.CallUnary(ctx, req)
}

// EmployeeServiceHandler is an implementation of the altalune.v1.EmployeeService service.
type EmployeeServiceHandler interface {
	QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error)
}

// NewEmployeeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmployeeServiceHandler(svc EmployeeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	employeeServiceQueryEmployeesHandler := connect.NewUnaryHandler(
		EmployeeServiceQueryEmployeesProcedure,
		svc.QueryEmployees,
		connect.WithSchema(employeeServiceQueryEmployeesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/altalune.v1.EmployeeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmployeeServiceQueryEmployeesProcedure:
			employeeServiceQueryEmployeesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmployeeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmployeeServiceHandler struct{}

func (UnimplementedEmployeeServiceHandler) QueryEmployees(context.Context, *connect.Request[v1.QueryEmployeesRequest]) (*connect.Response[v1.QueryEmployeesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.EmployeeService.QueryEmployees is not implemented"))
}
