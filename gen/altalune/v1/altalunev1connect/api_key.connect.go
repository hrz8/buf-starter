// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: altalune/v1/api_key.proto

package altalunev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hrz8/altalune/gen/altalune/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiKeyServiceName is the fully-qualified name of the ApiKeyService service.
	ApiKeyServiceName = "altalune.v1.ApiKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiKeyServiceQueryApiKeysProcedure is the fully-qualified name of the ApiKeyService's
	// QueryApiKeys RPC.
	ApiKeyServiceQueryApiKeysProcedure = "/altalune.v1.ApiKeyService/QueryApiKeys"
	// ApiKeyServiceCreateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// CreateApiKey RPC.
	ApiKeyServiceCreateApiKeyProcedure = "/altalune.v1.ApiKeyService/CreateApiKey"
	// ApiKeyServiceGetApiKeyProcedure is the fully-qualified name of the ApiKeyService's GetApiKey RPC.
	ApiKeyServiceGetApiKeyProcedure = "/altalune.v1.ApiKeyService/GetApiKey"
	// ApiKeyServiceUpdateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// UpdateApiKey RPC.
	ApiKeyServiceUpdateApiKeyProcedure = "/altalune.v1.ApiKeyService/UpdateApiKey"
	// ApiKeyServiceDeleteApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// DeleteApiKey RPC.
	ApiKeyServiceDeleteApiKeyProcedure = "/altalune.v1.ApiKeyService/DeleteApiKey"
	// ApiKeyServiceActivateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// ActivateApiKey RPC.
	ApiKeyServiceActivateApiKeyProcedure = "/altalune.v1.ApiKeyService/ActivateApiKey"
	// ApiKeyServiceDeactivateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// DeactivateApiKey RPC.
	ApiKeyServiceDeactivateApiKeyProcedure = "/altalune.v1.ApiKeyService/DeactivateApiKey"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	apiKeyServiceServiceDescriptor                = v1.File_altalune_v1_api_key_proto.Services().ByName("ApiKeyService")
	apiKeyServiceQueryApiKeysMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("QueryApiKeys")
	apiKeyServiceCreateApiKeyMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("CreateApiKey")
	apiKeyServiceGetApiKeyMethodDescriptor        = apiKeyServiceServiceDescriptor.Methods().ByName("GetApiKey")
	apiKeyServiceUpdateApiKeyMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("UpdateApiKey")
	apiKeyServiceDeleteApiKeyMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("DeleteApiKey")
	apiKeyServiceActivateApiKeyMethodDescriptor   = apiKeyServiceServiceDescriptor.Methods().ByName("ActivateApiKey")
	apiKeyServiceDeactivateApiKeyMethodDescriptor = apiKeyServiceServiceDescriptor.Methods().ByName("DeactivateApiKey")
)

// ApiKeyServiceClient is a client for the altalune.v1.ApiKeyService service.
type ApiKeyServiceClient interface {
	QueryApiKeys(context.Context, *connect.Request[v1.QueryApiKeysRequest]) (*connect.Response[v1.QueryApiKeysResponse], error)
	CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error)
	GetApiKey(context.Context, *connect.Request[v1.GetApiKeyRequest]) (*connect.Response[v1.GetApiKeyResponse], error)
	UpdateApiKey(context.Context, *connect.Request[v1.UpdateApiKeyRequest]) (*connect.Response[v1.UpdateApiKeyResponse], error)
	DeleteApiKey(context.Context, *connect.Request[v1.DeleteApiKeyRequest]) (*connect.Response[v1.DeleteApiKeyResponse], error)
	ActivateApiKey(context.Context, *connect.Request[v1.ActivateApiKeyRequest]) (*connect.Response[v1.ActivateApiKeyResponse], error)
	DeactivateApiKey(context.Context, *connect.Request[v1.DeactivateApiKeyRequest]) (*connect.Response[v1.DeactivateApiKeyResponse], error)
}

// NewApiKeyServiceClient constructs a client for the altalune.v1.ApiKeyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiKeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiKeyServiceClient{
		queryApiKeys: connect.NewClient[v1.QueryApiKeysRequest, v1.QueryApiKeysResponse](
			httpClient,
			baseURL+ApiKeyServiceQueryApiKeysProcedure,
			connect.WithSchema(apiKeyServiceQueryApiKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createApiKey: connect.NewClient[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceCreateApiKeyProcedure,
			connect.WithSchema(apiKeyServiceCreateApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getApiKey: connect.NewClient[v1.GetApiKeyRequest, v1.GetApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceGetApiKeyProcedure,
			connect.WithSchema(apiKeyServiceGetApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApiKey: connect.NewClient[v1.UpdateApiKeyRequest, v1.UpdateApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceUpdateApiKeyProcedure,
			connect.WithSchema(apiKeyServiceUpdateApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApiKey: connect.NewClient[v1.DeleteApiKeyRequest, v1.DeleteApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceDeleteApiKeyProcedure,
			connect.WithSchema(apiKeyServiceDeleteApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		activateApiKey: connect.NewClient[v1.ActivateApiKeyRequest, v1.ActivateApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceActivateApiKeyProcedure,
			connect.WithSchema(apiKeyServiceActivateApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateApiKey: connect.NewClient[v1.DeactivateApiKeyRequest, v1.DeactivateApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceDeactivateApiKeyProcedure,
			connect.WithSchema(apiKeyServiceDeactivateApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiKeyServiceClient implements ApiKeyServiceClient.
type apiKeyServiceClient struct {
	queryApiKeys     *connect.Client[v1.QueryApiKeysRequest, v1.QueryApiKeysResponse]
	createApiKey     *connect.Client[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse]
	getApiKey        *connect.Client[v1.GetApiKeyRequest, v1.GetApiKeyResponse]
	updateApiKey     *connect.Client[v1.UpdateApiKeyRequest, v1.UpdateApiKeyResponse]
	deleteApiKey     *connect.Client[v1.DeleteApiKeyRequest, v1.DeleteApiKeyResponse]
	activateApiKey   *connect.Client[v1.ActivateApiKeyRequest, v1.ActivateApiKeyResponse]
	deactivateApiKey *connect.Client[v1.DeactivateApiKeyRequest, v1.DeactivateApiKeyResponse]
}

// QueryApiKeys calls altalune.v1.ApiKeyService.QueryApiKeys.
func (c *apiKeyServiceClient) QueryApiKeys(ctx context.Context, req *connect.Request[v1.QueryApiKeysRequest]) (*connect.Response[v1.QueryApiKeysResponse], error) {
	return c.queryApiKeys.CallUnary(ctx, req)
}

// CreateApiKey calls altalune.v1.ApiKeyService.CreateApiKey.
func (c *apiKeyServiceClient) CreateApiKey(ctx context.Context, req *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error) {
	return c.createApiKey.CallUnary(ctx, req)
}

// GetApiKey calls altalune.v1.ApiKeyService.GetApiKey.
func (c *apiKeyServiceClient) GetApiKey(ctx context.Context, req *connect.Request[v1.GetApiKeyRequest]) (*connect.Response[v1.GetApiKeyResponse], error) {
	return c.getApiKey.CallUnary(ctx, req)
}

// UpdateApiKey calls altalune.v1.ApiKeyService.UpdateApiKey.
func (c *apiKeyServiceClient) UpdateApiKey(ctx context.Context, req *connect.Request[v1.UpdateApiKeyRequest]) (*connect.Response[v1.UpdateApiKeyResponse], error) {
	return c.updateApiKey.CallUnary(ctx, req)
}

// DeleteApiKey calls altalune.v1.ApiKeyService.DeleteApiKey.
func (c *apiKeyServiceClient) DeleteApiKey(ctx context.Context, req *connect.Request[v1.DeleteApiKeyRequest]) (*connect.Response[v1.DeleteApiKeyResponse], error) {
	return c.deleteApiKey.CallUnary(ctx, req)
}

// ActivateApiKey calls altalune.v1.ApiKeyService.ActivateApiKey.
func (c *apiKeyServiceClient) ActivateApiKey(ctx context.Context, req *connect.Request[v1.ActivateApiKeyRequest]) (*connect.Response[v1.ActivateApiKeyResponse], error) {
	return c.activateApiKey.CallUnary(ctx, req)
}

// DeactivateApiKey calls altalune.v1.ApiKeyService.DeactivateApiKey.
func (c *apiKeyServiceClient) DeactivateApiKey(ctx context.Context, req *connect.Request[v1.DeactivateApiKeyRequest]) (*connect.Response[v1.DeactivateApiKeyResponse], error) {
	return c.deactivateApiKey.CallUnary(ctx, req)
}

// ApiKeyServiceHandler is an implementation of the altalune.v1.ApiKeyService service.
type ApiKeyServiceHandler interface {
	QueryApiKeys(context.Context, *connect.Request[v1.QueryApiKeysRequest]) (*connect.Response[v1.QueryApiKeysResponse], error)
	CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error)
	GetApiKey(context.Context, *connect.Request[v1.GetApiKeyRequest]) (*connect.Response[v1.GetApiKeyResponse], error)
	UpdateApiKey(context.Context, *connect.Request[v1.UpdateApiKeyRequest]) (*connect.Response[v1.UpdateApiKeyResponse], error)
	DeleteApiKey(context.Context, *connect.Request[v1.DeleteApiKeyRequest]) (*connect.Response[v1.DeleteApiKeyResponse], error)
	ActivateApiKey(context.Context, *connect.Request[v1.ActivateApiKeyRequest]) (*connect.Response[v1.ActivateApiKeyResponse], error)
	DeactivateApiKey(context.Context, *connect.Request[v1.DeactivateApiKeyRequest]) (*connect.Response[v1.DeactivateApiKeyResponse], error)
}

// NewApiKeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiKeyServiceHandler(svc ApiKeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiKeyServiceQueryApiKeysHandler := connect.NewUnaryHandler(
		ApiKeyServiceQueryApiKeysProcedure,
		svc.QueryApiKeys,
		connect.WithSchema(apiKeyServiceQueryApiKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceCreateApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceCreateApiKeyProcedure,
		svc.CreateApiKey,
		connect.WithSchema(apiKeyServiceCreateApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceGetApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceGetApiKeyProcedure,
		svc.GetApiKey,
		connect.WithSchema(apiKeyServiceGetApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceUpdateApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceUpdateApiKeyProcedure,
		svc.UpdateApiKey,
		connect.WithSchema(apiKeyServiceUpdateApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceDeleteApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceDeleteApiKeyProcedure,
		svc.DeleteApiKey,
		connect.WithSchema(apiKeyServiceDeleteApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceActivateApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceActivateApiKeyProcedure,
		svc.ActivateApiKey,
		connect.WithSchema(apiKeyServiceActivateApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceDeactivateApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceDeactivateApiKeyProcedure,
		svc.DeactivateApiKey,
		connect.WithSchema(apiKeyServiceDeactivateApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/altalune.v1.ApiKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiKeyServiceQueryApiKeysProcedure:
			apiKeyServiceQueryApiKeysHandler.ServeHTTP(w, r)
		case ApiKeyServiceCreateApiKeyProcedure:
			apiKeyServiceCreateApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceGetApiKeyProcedure:
			apiKeyServiceGetApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceUpdateApiKeyProcedure:
			apiKeyServiceUpdateApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceDeleteApiKeyProcedure:
			apiKeyServiceDeleteApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceActivateApiKeyProcedure:
			apiKeyServiceActivateApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceDeactivateApiKeyProcedure:
			apiKeyServiceDeactivateApiKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiKeyServiceHandler struct{}

func (UnimplementedApiKeyServiceHandler) QueryApiKeys(context.Context, *connect.Request[v1.QueryApiKeysRequest]) (*connect.Response[v1.QueryApiKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.QueryApiKeys is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.CreateApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) GetApiKey(context.Context, *connect.Request[v1.GetApiKeyRequest]) (*connect.Response[v1.GetApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.GetApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) UpdateApiKey(context.Context, *connect.Request[v1.UpdateApiKeyRequest]) (*connect.Response[v1.UpdateApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.UpdateApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) DeleteApiKey(context.Context, *connect.Request[v1.DeleteApiKeyRequest]) (*connect.Response[v1.DeleteApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.DeleteApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) ActivateApiKey(context.Context, *connect.Request[v1.ActivateApiKeyRequest]) (*connect.Response[v1.ActivateApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.ActivateApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) DeactivateApiKey(context.Context, *connect.Request[v1.DeactivateApiKeyRequest]) (*connect.Response[v1.DeactivateApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("altalune.v1.ApiKeyService.DeactivateApiKey is not implemented"))
}
